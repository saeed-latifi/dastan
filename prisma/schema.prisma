// npx prisma migrate dev --name init
// npx prisma generate

// LOCAL_DATABASE_URL
// EXTERNAL_DATABASE_URL
// LOCAL_TEST_DATABASE_URL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("EXTERNAL_DATABASE_URL")
}

// location
model Province {
  id    Int    @id @default(autoincrement()) @db.SmallInt
  title String @db.VarChar(30)
  users User[]
  jobs  Job[]
}

// category
model Category {
  id       Int       @id @default(autoincrement()) @db.SmallInt
  title    String    @db.VarChar(30)
  users    User[]
  contents Content[]
  Job      Job[]
}

//account
enum PermissionType {
  GUEST
  USER
  AUTHOR
  SUPERVISOR
  ADMIN
}

model Account {
  id         String         @id @default(cuid())
  password   String         @db.VarChar(30)
  createdAt  DateTime       @default(now()) @db.Date
  isActive   Boolean        @default(false)
  isDeleted  Boolean        @default(false)
  permission PermissionType @default(GUEST)
  user       User?

  @@index([id, permission])
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique @db.VarChar(30)
  firstName  String?    @db.VarChar(30)
  lastName   String?    @db.VarChar(30)
  image      String?
  email      String     @unique @db.VarChar(70)
  phone      String?    @unique @db.VarChar(11)
  provinceId Int?       @db.SmallInt
  province   Province?  @relation(fields: [provinceId], references: [id])
  interests  Category[]
  keywords   Keyword[]
  likes      Like[]
  comments   Comment[]
  reports    Report[]

  resumeContext String   @default("")
  portfolio     String[]

  teams       Team[] @relation("manager")
  memberships Team[]

  contents        Content[] @relation("composed")
  privateContents Content[]

  followers User[] @relation("Followers")
  follows   User[] @relation("Followers")

  // account
  accountId String  @unique
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  // ticketing
  tickets       Ticket[]
  adminMessages AdminMessage[]

  @@index([accountId])
  @@index([username])
}

model AdminMessage {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(30)
  description String
  isRead      Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @db.Date
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
}

model Ticket {
  id       Int             @id @default(autoincrement())
  title    String          @db.VarChar(30)
  isActive Boolean         @default(true)
  messages TicketMessage[]
  userId   Int
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model TicketMessage {
  id          Int     @id @default(autoincrement())
  description String
  isAdmin     Boolean @default(false)
  ticketId    Int
  ticket      Ticket  @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
}

// contents
model Keyword {
  id       Int       @id @default(autoincrement())
  title    String    @unique @db.VarChar(30)
  authorId Int
  author   User      @relation(fields: [authorId], references: [id])
  contents Content[]

  @@index([title])
  @@index([id, title])
}

model Content {
  id          Int     @id @default(autoincrement())
  title       String  @unique @db.VarChar(100)
  description String
  image       String?
  context     String?

  // TODO quil
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt

  // category
  categoryId Int      @db.SmallInt
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  course   Course?
  post     Post?
  comments Comment[]
  reports  Report[]
  likes    Like[]
  keywords Keyword[]

  // author
  authorId Int
  author   User @relation("composed", fields: [authorId], references: [id], onDelete: Cascade)

  isPrivate       Boolean @default(false)
  authorizedUsers User[]
  price           Int?

  @@unique([createdAt, id])
  @@index([authorId])
  @@index([categoryId])
  @@index([createdAt, isActive])
}

model Course {
  id      Int      @id @default(autoincrement())
  lessons Lesson[]

  // content
  contentId Int     @unique
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
}

model Lesson {
  id       Int     @id @default(autoincrement())
  title    String
  videoUrl String?
  duration Int     @default(0)

  // course
  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model Post {
  id Int @id @default(autoincrement())

  // content
  contentId Int     @unique
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
}

// content act
model Like {
  contentId Int
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@id([contentId, authorId])
  @@index([authorId])
  @@index([contentId])
}

model Comment {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now()) @db.Date
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)

  contentId Int
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  parentId Int?
  parent   Comment?  @relation("parent", fields: [parentId], references: [id])
  children Comment[] @relation("parent")

  replyId Int?
  reply   Comment?  @relation("root", fields: [replyId], references: [id])
  replies Comment[] @relation("root")

  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@index([authorId])
  @@index([parentId, contentId])
}

model Report {
  id          Int      @id @default(autoincrement())
  description String
  createdAt   DateTime @default(now()) @db.Date

  contentId Int
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@index([contentId, authorId])
}

//team
model Team {
  id             Int      @id @default(autoincrement())
  title          String   @unique
  description    String
  context        String?
  image          String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now()) @db.Date
  contactMethods String[]
  jobs           Job[]

  managerId Int
  manager   User   @relation("manager", fields: [managerId], references: [id], onDelete: Cascade)
  members   User[] @relation()

  @@index([managerId])
}

enum WageType {
  FIXED
  PARTNERSHIP
  AGREEMENT
}

model Job {
  id           Int       @id @default(autoincrement())
  title        String
  description  String
  createdAt    DateTime  @default(now()) @db.Date
  updatedAt    DateTime  @updatedAt
  isActive     Boolean   @default(true)
  wageType     WageType
  wage         Int?
  provinceId   Int?      @db.SmallInt
  province     Province? @relation(fields: [provinceId], references: [id])
  benefits     String[]
  requirements String[]
  categoryId   Int
  category     Category  @relation(fields: [categoryId], references: [id])

  teamId Int
  team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([createdAt, isActive])
  @@index([wageType, wage])
  @@index([provinceId])
}
